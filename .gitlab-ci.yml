image: docker:latest

variables:
  # This should be set by docker image already, just to be sure...
  DOCKER_HOST: tcp://docker:2375
  # Use overlayfs driver for better performance
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  GITLAB_DOCKERREGISTRY_SUFFIX: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}
  GITLAB_DOCKERREGISTRY_SUFFIX_LATEST: ${CI_COMMIT_REF_SLUG}-latest

services:
  - name: docker:dind

before_script:
  - docker info

stages:
  - build-base
  - build-stage1
  - build-stage2
  - deploy

# Docker image builds
#
# Build the Docker images  specificd in DOCKERFILE_FOLDER/IMAGE_NAME and push
# it to Gitlab's internal Docker registry
.docker-build:
  variables:
    IMAGE_ARCH: arm32v7
    ADD_TORADEX_REPOSITORY: 1
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - if test -n "${BASE_NAME}"; then docker pull ${CI_REGISTRY_IMAGE}/${BASE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX} && docker tag ${CI_REGISTRY_IMAGE}/${BASE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX} torizon/${BASE_NAME}:buster ; fi || exit 1
    # Try to download latest image for cache, but don't fail if it does not exist
    - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST} || true
    - docker pull ${CI_REGISTRY}/rd/torizon-core-containers/debian-docker-images/${IMAGE_NAME}:buster-latest || true
    - docker build --build-arg IMAGE_ARCH=${IMAGE_ARCH}
                     --build-arg BASE_NAME=${BASE_NAME}
                     --build-arg ADD_TORADEX_REPOSITORY=${ADD_TORADEX_REPOSITORY}
                     --build-arg ACCEPT_FSL_EULA=${ACCEPT_FSL_EULA}
                     --cache-from ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
                     --cache-from ${CI_REGISTRY}/rd/torizon-core-containers/debian-docker-images/${IMAGE_NAME}:buster-latest
                     ${DOCKER_NO_CACHE:+--no-cache}
                     -f ${DOCKERFILE_FOLDER}Dockerfile
                     -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
                     -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
                     ${DOCKERFILE_FOLDER}
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}

docker-build-base:
  extends: .docker-build
  variables:
    IMAGE_NAME: arm32v7-debian-base
    DOCKERFILE_FOLDER: "base/"
  stage: build-base

docker-build-wayland-base:
  extends: .docker-build
  variables:
    BASE_NAME: arm32v7-debian-base
    IMAGE_NAME: arm32v7-debian-wayland-base
    DOCKERFILE_FOLDER: "wayland-base/"
  stage: build-stage1

docker-build-weston:
  extends: .docker-build
  variables:
    BASE_NAME: arm32v7-debian-wayland-base
    IMAGE_NAME: arm32v7-debian-weston
    DOCKERFILE_FOLDER: "weston/"
  stage: build-stage2

docker-build-shell:
  extends: .docker-build
  variables:
    BASE_NAME: arm32v7-debian-base
    IMAGE_NAME: arm32v7-debian-shell
    DOCKERFILE_FOLDER: "shell/"
  stage: build-stage1

docker-build-compose:
  extends: .docker-build
  variables:
    BASE_NAME: arm32v7-debian-base
    IMAGE_NAME: arm32v7-debian-docker-compose
    DOCKERFILE_FOLDER: "docker-compose/"
  stage: build-stage1

docker-build-qt5-wayland:
  extends: .docker-build
  variables:
    BASE_NAME: arm32v7-debian-wayland-base
    IMAGE_NAME: arm32v7-debian-qt5-wayland
    DOCKERFILE_FOLDER: "qt5-wayland/"
  stage: build-stage2

docker-build-base-arm64v8:
  extends: .docker-build
  variables:
    IMAGE_ARCH: arm64v8
    IMAGE_NAME: arm64v8-debian-base
    DOCKERFILE_FOLDER: "base/"
  stage: build-base

docker-build-wayland-base-arm64v8:
  extends: .docker-build
  variables:
    IMAGE_ARCH: arm64v8
    BASE_NAME: arm64v8-debian-base
    IMAGE_NAME: arm64v8-debian-wayland-base
    DOCKERFILE_FOLDER: "wayland-base/"
  stage: build-stage1

docker-build-wayland-base-vivante-arm64v8:
  extends: .docker-build
  variables:
    IMAGE_ARCH: arm64v8
    BASE_NAME: arm64v8-debian-base
    IMAGE_NAME: arm64v8-debian-wayland-base-vivante
    ACCEPT_FSL_EULA: 1
    DOCKERFILE_FOLDER: "wayland-base-vivante/"
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_VIVANTE}
  stage: build-stage1

docker-build-weston-vivante-arm64v8:
  extends: .docker-build
  variables:
    IMAGE_ARCH: arm64v8
    BASE_NAME: arm64v8-debian-wayland-base-vivante
    IMAGE_NAME: arm64v8-debian-weston-vivante
    ACCEPT_FSL_EULA: 1
    DOCKERFILE_FOLDER: "weston/"
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_VIVANTE}
  stage: build-stage2

docker-build-shell-arm64v8:
  extends: .docker-build
  variables:
    BASE_NAME: arm64v8-debian-base
    IMAGE_NAME: arm64v8-debian-shell
    DOCKERFILE_FOLDER: "shell/"
  stage: build-stage1

docker-build-compose-arm64v8:
  extends: .docker-build
  variables:
    IMAGE_ARCH: arm64v8
    BASE_NAME: arm64v8-debian-base
    IMAGE_NAME: arm64v8-debian-docker-compose
    DOCKERFILE_FOLDER: "docker-compose/"
  stage: build-stage1

docker-build-qt5-wayland-arm64v8:
  extends: .docker-build
  variables:
    IMAGE_ARCH: arm64v8
    BASE_NAME: arm64v8-debian-wayland-base
    IMAGE_NAME: arm64v8-debian-qt5-wayland
    DOCKERFILE_FOLDER: "qt5-wayland/"
  stage: build-stage2

docker-build-qt5-wayland-vivante-arm64v8:
  extends: .docker-build
  variables:
    IMAGE_ARCH: arm64v8
    BASE_NAME: arm64v8-debian-wayland-base-vivante
    IMAGE_NAME: arm64v8-debian-qt5-wayland-vivante
    DOCKERFILE_FOLDER: "qt5-wayland/"
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_VIVANTE}
  stage: build-stage2

# Docker deploy jobs
#
# Make sure DOCKER_HUB_USER/DOCKER_HUB_PW is properly set in the project
# specific Gitlab CI settings.
.docker-deploy:
  variables:
    DOCKER_TAGS: "buster 10 10.3 latest"
  before_script:
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PW
  stage: deploy
  when: manual
  script:
  - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
  # Get creation date of this container. This make sure that we do not create
  # new date tags when pushing the same container again.
  - export TIMESTAMP=$(docker inspect -f '{{ .Created }}' ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX})
  - export DATE_TAG=$(date '+%Y%m%d' -d ${TIMESTAMP} -D '%Y-%m-%dT%H:%M:%S')
  - export DOCKER_TAGS="$DOCKER_TAGS buster-$DATE_TAG"
  - for tag in ${DOCKER_TAGS};
    do
      docker tag ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag};
    done
  - docker push ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}

docker-deploy-base:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm32v7-debian-base

docker-deploy-wayland-base:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm32v7-debian-wayland-base

docker-deploy-weston:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm32v7-debian-weston

docker-deploy-shell:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm32v7-debian-shell

docker-deploy-docker-compose:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm32v7-debian-docker-compose

docker-deploy-qt5-wayland:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm32v7-debian-qt5-wayland

docker-deploy-base-arm64v8:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm64v8-debian-base

docker-deploy-wayland-base-arm64v8:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm64v8-debian-wayland-base

docker-deploy-wayland-base-vivante-arm64v8:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm64v8-debian-wayland-base-vivante

docker-deploy-weston-vivante-arm64v8:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm64v8-debian-weston-vivante

docker-deploy-shell-arm64v8:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm64v8-debian-shell

docker-deploy-docker-compose-arm64v8:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm64v8-debian-docker-compose

docker-deploy-qt5-wayland-arm64v8:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm64v8-debian-qt5-wayland

docker-deploy-qt5-wayland-vivante-arm64v8:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm64v8-debian-qt5-wayland-vivante
